// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using infrastructure.data;

#nullable disable

namespace infrastructure.Migrations.Products
{
    [DbContext(typeof(productContext))]
    partial class productContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("core.Controllers.ProductBrand", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("ProductBrand");
                });

            modelBuilder.Entity("core.Controllers.ProductType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("ProductType");
                });

            modelBuilder.Entity("core.Controllers.Products", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("prodDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("prodName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("prodPicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("prodPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("productBrandId")
                        .HasColumnType("int");

                    b.Property<int>("productTypeId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("productBrandId");

                    b.HasIndex("productTypeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("core.Entities.Adverts.Adverts", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("advert")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("time")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("id");

                    b.ToTable("Adverts");
                });

            modelBuilder.Entity("core.Entities.Oders.AdminOrder", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("adminOrderId")
                        .HasColumnType("int");

                    b.Property<string>("confirmation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("deliveryid")
                        .HasColumnType("int");

                    b.Property<DateTime>("orderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("orderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("deliveryid");

                    b.ToTable("AdminOrder");
                });

            modelBuilder.Entity("core.Entities.Oders.Delivery", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("delDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("delName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("delPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("delTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Delivery");
                });

            modelBuilder.Entity("core.Entities.Oders.ItemOrdered", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("AdminOrderid")
                        .HasColumnType("int");

                    b.Property<int?>("Orderid")
                        .HasColumnType("int");

                    b.Property<decimal>("itemPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("AdminOrderid");

                    b.HasIndex("Orderid");

                    b.ToTable("ItemOrdered");
                });

            modelBuilder.Entity("core.Entities.Oders.Order", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("confirmation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("deliveryid")
                        .HasColumnType("int");

                    b.Property<DateTime>("orderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("orderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("paymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("subTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("id");

                    b.HasIndex("deliveryid");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("core.Controllers.Products", b =>
                {
                    b.HasOne("core.Controllers.ProductBrand", "productBrand")
                        .WithMany()
                        .HasForeignKey("productBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("core.Controllers.ProductType", "productType")
                        .WithMany()
                        .HasForeignKey("productTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("productBrand");

                    b.Navigation("productType");
                });

            modelBuilder.Entity("core.Entities.Oders.AdminOrder", b =>
                {
                    b.HasOne("core.Entities.Oders.Delivery", "delivery")
                        .WithMany()
                        .HasForeignKey("deliveryid");

                    b.OwnsOne("core.Entities.Oders.ShippingAddress", "address", b1 =>
                        {
                            b1.Property<int>("AdminOrderid")
                                .HasColumnType("int");

                            b1.Property<string>("city")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("country")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("firstName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("lastName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("middleName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("phone")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("street")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("zipcode")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AdminOrderid");

                            b1.ToTable("AdminOrder");

                            b1.WithOwner()
                                .HasForeignKey("AdminOrderid");
                        });

                    b.Navigation("address")
                        .IsRequired();

                    b.Navigation("delivery");
                });

            modelBuilder.Entity("core.Entities.Oders.ItemOrdered", b =>
                {
                    b.HasOne("core.Entities.Oders.AdminOrder", null)
                        .WithMany("itemOrdered")
                        .HasForeignKey("AdminOrderid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("core.Entities.Oders.Order", null)
                        .WithMany("itemOrdered")
                        .HasForeignKey("Orderid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("core.Entities.Oders.ProductOrdered", "productOrdered", b1 =>
                        {
                            b1.Property<int>("ItemOrderedid")
                                .HasColumnType("int");

                            b1.Property<int>("id")
                                .HasColumnType("int");

                            b1.Property<string>("prodName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("prodPicture")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ItemOrderedid");

                            b1.ToTable("ItemOrdered");

                            b1.WithOwner()
                                .HasForeignKey("ItemOrderedid");
                        });

                    b.Navigation("productOrdered");
                });

            modelBuilder.Entity("core.Entities.Oders.Order", b =>
                {
                    b.HasOne("core.Entities.Oders.Delivery", "delivery")
                        .WithMany()
                        .HasForeignKey("deliveryid");

                    b.OwnsOne("core.Entities.Oders.ShippingAddress", "address", b1 =>
                        {
                            b1.Property<int>("Orderid")
                                .HasColumnType("int");

                            b1.Property<string>("city")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("country")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("firstName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("lastName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("middleName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("phone")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("street")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("zipcode")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Orderid");

                            b1.ToTable("Order");

                            b1.WithOwner()
                                .HasForeignKey("Orderid");
                        });

                    b.Navigation("address")
                        .IsRequired();

                    b.Navigation("delivery");
                });

            modelBuilder.Entity("core.Entities.Oders.AdminOrder", b =>
                {
                    b.Navigation("itemOrdered");
                });

            modelBuilder.Entity("core.Entities.Oders.Order", b =>
                {
                    b.Navigation("itemOrdered");
                });
#pragma warning restore 612, 618
        }
    }
}
